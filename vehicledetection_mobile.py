# -*- coding: utf-8 -*-
"""vehicledetection_mobile.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hZCYonzv3PPGXD5xszVY9dN-bHyFSWng

https://towardsdatascience.com/using-tensorflow-lite-for-object-detection-2a0283f94aed
"""

import tensorflow as tf
from centroids_tracking import CentroidTracker
import trackableobjects
from trackableobjects import TrackableObject
from imutils.video import VideoStream
from imutils.video import FPS
import object_DetectionInfer
import argparse
import imutils
import dlib
import cv2
import numpy as np

from object_detection.utils import visualization_utils as vis_util

CLASSES = ["background", "aeroplane", "bicycle", "bird", "boat",
	"bottle", "bus", "car", "cat", "chair", "cow", "diningtable",
	"dog", "horse", "motorbike", "person", "pottedplant", "sheep",
	"sofa", "train", "tvmonitor"]


# construct the argument parse and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-p", "--prototxt", required=True,
	help="path to Caffe 'deploy' prototxt file")
ap.add_argument("-m", "--model", required=True,
	help="path to Caffe pre-trained model")
ap.add_argument("-i", "--input", type=str,
	help="path to optional input video file")
ap.add_argument("-o", "--output", type=str,
	help="path to optional output video file")
ap.add_argument("-c", "--confidence", type=float, default=0.4,
	help="minimum probability to filter weak detections")
ap.add_argument("-s", "--skip-frames", type=int, default=30,
	help="# of skip frames between detections")
args = vars(ap.parse_args())
#!Python /content/drive/MyDrive/models/research/object_detection/builders/model_builder_test.py




#import pafy
interpreter = tf.lite.Interpreter(model_path="C:/Users/dhany/models/research/object_detection/models/detect.tflite")
interpreter.allocate_tensors()
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()
category_index = object_DetectionInfer.create_category_index()



src = 0
#Supplying video input
import time
#url = "https://www.youtube.com/watch?v=nt3D26lrkho"
#url = "https://www.youtube.com/watch?v=WOn7m0_aYBw"
#video = pafy.new(url)
print("[INFO] loading model...")
net = cv2.dnn.readNetFromCaffe(args["prototxt"], args["model"])
# if a video path was not supplied, grab a reference to the webcam
if not args.get("input", False):
	print("[INFO] starting video stream...")
	vs =   VideoStream(src=0).start()
	time.sleep(2.0)
# otherwise, grab a reference to the video file
else:
	print("[INFO] opening video file...")
	vs = cv2.VideoCapture(args["input"])


# otherwise, grab a reference to the video file
# initialize the video writer (we'll instantiate later if need be)
writer = None
#object_counting(boxes, frame, totalFrames)
W = None
H = None


#ct = CentroidTracker(maxDisappeared=50, maxDistance=50)
ct = CentroidTracker(maxDisappeared=3, maxDistance=70)


trackers = []
trackableObjects = {}
# initialize the total number of frames processed thus far, along
# with the total number of objects that have moved either up or down
totalFrames = 0
totalDown = 0
totalUp = 0
fps = FPS().start()



while True:
    try:
        #no ret for webcam
        frame = vs.read()
        frame = frame[1] if args.get("input", False) else frame
        # if we are viewing a video and we did not grab a frame then we
        # have reached the end of the video
        if args["input"] is not None and frame is None:
           break

        # start the frames per second throughout estimator
        frame = imutils.resize(frame, width=500)
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        if W is None or H is None:
            (H, W) = frame.shape[:2]
        if args["output"] is not None and writer is None:
            fourcc = cv2.VideoWriter_fourcc(*"MJPG")
            writer = cv2.VideoWriter(args["output"], fourcc, 30,
            (W, H), True)

        status = "waiting"
        rects = []
        
        if totalFrames % 3 == 0:
           #set the status and initialize our new set of object trackers
          status = "Detecting"
          trackers = []
         #temp_boxes, classes, scores, frame1 = object_DetectionInfer.show_inference(frame, interpreter, category_index, input_details, output_details, totalFrames)
          #converted boxes which was an ndarray to list
          blob = cv2.dnn.blobFromImage(frame, 0.003921, (W, H), swapRB=True, crop=False)
          net.setInput(blob)
          detections = net.forward()
          # loop over the detections
          for i in np.arange(0, detections.shape[2]):
            # extract the confidence (i.e., probability) associated
            # with the prediction
            confidence = detections[0, 0, i, 2]
            # filter out weak detections by requiring a minimum
            if confidence > args["confidence"]:
                # extract the index of the class label from the
                # detections list
                print(detections[0, 0, i, 1])
                idx = int(detections[0, 0, i, 1])
                # if the class label is not a person, ignore it
                print(CLASSES[idx])
                if CLASSES[idx] != "car":
                    continue
                # compute the (x, y)-coordinates of the bounding box
                # for the object
                box = detections[0, 0, i, 3:7] * np.array([W, H, W, H])
                (startX, startY, endX, endY) = box.astype("int")
                # construct a dlib rectangle object from the bounding
                # box coordinates and then start the dlib correlation
                # tracker
                rect = dlib.rectangle(startX, startY, endX, endY)
                tracker = dlib.correlation_tracker()
#               tracker.start_track(rgb, rect)
                tracker.start_track(frame_rgb, rect)
                 # add the tracker to our list of trackers so we can
                 # utilize it during skip frames
                trackers.append(tracker)
                  
                  
        # otherwise, we should utilize our object *trackers* rather than
        #object *detectors* to obtain a higher frame processing throughput
        else:
		    # loop over the trackers
            for tracker in trackers:
                # set the status of our system to be 'tracking' rather
			    # than 'waiting' or 'detecting'
                status = "Tracking"
			    # update the tracker and grab the updated position
                tracker.update(frame_rgb)
                pos = tracker.get_position()
			    # unpack the position object
                startX = int(pos.left())
                startY = int(pos.top())
                endX = int(pos.right())
                endY = int(pos.bottom())
			    # add the bounding box coordinates to the rectangles list
                rects.append((startX, startY, endX, endY))
        # draw a horizontal line in the center of the frame -- once an
        # object crosses this line we will determine whether they were
        # moving 'up' or 'down'
        img =cv2.line(frame, (0, H*3//5), (W, H*3//4), (0, 255, 255), 2)
        #img =cv2.line(frame, (W//2, 0), (W//2, H), (0, 255, 255), 2)
        # use the centroid tracker to associate the (1) old object
        # centroids with (2) the newly computed object centroids
        objects = ct.update(rects)
        for (objectID, centroid) in objects.items():
            # check to see if a trackable object exists for the current
            # object ID
            #print("object for loop")
            to = trackableObjects.get(objectID, None)
            # if there is no existing trackable object, create one
            if to is None:
                to = TrackableObject(objectID, centroid)
            #print(to[:][1])
		    # otherwise, there is a trackable object so we can utilize it
		    # to determine direction
            else:
			    # the difference between the y-coordinate of the *current*
			    # centroid and the mean of *previous* centroids will tell
			    # us in which direction the object is moving (negative for
			    # 'up' and positive for 'down')
#               print("centroid")
                y = [c[1] for c in to.centroids]
                direction = centroid[1] - np.mean(y)
                to.centroids.append(centroid)
			# check to see if the object has been counted or not
                if not to.counted:
#                    print("counted")
				# if the direction is negative (indicating the object
				# is moving up) AND the centroid is above the center
				# line, count the object
                    if direction < 0 and centroid[1] <( H*3//4) and centroid[1] >( H*3//5):
                    #if direction < 0 and centroid[1] < W // 2:
                        print("direction")
                        totalUp += 1
                        to.counted = True
				        # if the direction is positive (indicating the object
				        # is moving down) AND the centroid is below the
				        # center line, count the object
                    elif direction > 0 and centroid[1] > (H*3//5) and centroid[1] < (H*3//4):
                    #elif direction > 0 and centroid[1] > W // 2:
                        totalDown += 1
                        to.counted = True
            # store the trackable object in our dictionary
            trackableObjects[objectID] = to
            # draw both the ID of the object and the centroid of the
		    # object on the output frame
            text = "ID {}".format(objectID)
            cv2.putText(img, text, (centroid[0] - 10, centroid[1] - 10),
                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
            cv2.circle(img, (centroid[0], centroid[1]), 4, (0, 255, 0), -1)
          	# construct a tuple of information we will be displaying on the
	# frame

        info = [
            ("Up", totalUp),
            ("Down", totalDown),
            ("Status", status),
        ]
	# loop over the info tuples and draw them on our frame
        for (i, (k, v)) in enumerate(info):
            text = "{}: {}".format(k, v)
            cv2.putText(img, text, (10, H - ((i * 20) + 20)),
                cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 2)
        #vis_util.visualize_boxes_and_labels_on_image_array(
                 #frame,
                 #temp_boxes,
                # classes,
                 #scores,
                 #category_index,
                 #use_normalized_coordinates=True,
#                min_score_thresh=0.6,
                 #line_thickness=1)
        if writer is not None:
           writer.write(frame)
        cv2.imshow("Image", frame)
#        if( cv2.waitKey(1) & 0xFF == ord( 'q' ) ):
        if( cv2.waitKey(1) & 0xFF == ord( 'q' ) ):
            
            break
        totalFrames += 1
        fps.update()
    except KeyboardInterrupt:
        break
if not args.get("input", False):
    vs.stop()
# otherwise, release the video file pointer
else:
    vs.release()
# close any open windows
cv2.destroyAllWindows()

